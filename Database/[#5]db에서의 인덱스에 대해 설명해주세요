인덱스란 특정 필드와 매칭되는 데이터의 위치를 저장하는 자료구조이다.

인덱스를 통해서 사용자는 검색의 속도를 향상시킬 수 있는데 그 원리는 다음과 같다.
인덱스를 구성하지 않았을 때 쿼리를 실행하면 Full Table Scan을 진행한다. 즉, 데이터베이스에 있는 값들을 메모리에 올려서 쭉 검사해서 찾는 과정을 반복한다는 것이다.
그렇기 때문에 불필요한 row의 검색이 많이 일어나게 되고, 느리다. 

반면, 인덱스를 구성했고 사용하는 쿼리가 인덱스에 있는 값만을 이용해서 수행될 수 있다면 인덱스를 이용인덱스가 있을 시에는 Indexed Query를 진행한다.

인덱스를 탄다는 것을 인덱스의 구조, 즉 B-트리의 구조를 따라 탐색을 진행한다는 것을 의미한다.
루트노드에서 트리를 한차례 내려갈 때마다 검색에 필요한 row의 수가 급격하게 줄어들고, 필요로 하는 값을 찾았을 때는 그때부터 연결리스트를 따라서 순차적으로 탐색하게 된다.
일반적으로 O(logN)의 시간복잡도를 가지고 있다.

다만, 이 때도 조심해야 하는 점이 몇 가지 있는데, 먼저, 인덱스를 건 컬럼이 실제 쿼리에 필요한 컬럼과 다르면 인덱스를 타지 않는다는 것이다. 인덱스를 타는 것으로 쿼리의 결과를 도출해낼 수 없다.
다음으로, 인덱스를 거는 칼럼은 값의 범위가 넓어야 한다. 불리언에 인덱스를 걸면 복잡도를 Full Table Scan에 비해 1/2정도 만으로 줄인것으로 링크드리스트타고 Full Table Scan하는거랑 별 차이가 없다.
마지막으로, 인덱스를 여러개의 컬럼에 걸게 되는 경우에는 인덱스의 순서에 신경을 써야 한다. 인덱스를 통해 걸러지는 row의 수가 큰 순서대로 거는 것이 좋다.

또 인덱스가 만능은 아니라는 점도 알 필요는 있다. 인덱스의 자료구조 자체가 B-트리의 구조를 띄고 있기 때문에 읽기는 빠르지만 쓰기가 일어나게 되면 트리의 균형을 맞추기 위해 트리를 조정하게 된다. 
따라서, 무턱대고 모든 컬럼에 인덱스를 걸었다가는 쓰기를 할때마다 약간의 버벅임을 경험할 수도 있다. 여러개의 컬럼에 인덱스를 걸게 되면 일부 쿼리는 인덱스를 타고 속도가 빨라지지만, 다른 쿼리는 인덱스의 일부를 이용하는데도
효율이 잘 나오지 않는 현상 또한 발생한다.

결국 인덱스를 어떻게 걸고 어떻게 활용할 지는 비즈니스 로직의 중요도에 달려있다고 할 수 있다.